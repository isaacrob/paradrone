import click, cv2, sys, time
import gentimedist as gen
from math import log
from IPython.parallel import Client

@click.command()
@click.option('--profile',default='mactopicluster',help='which profile to use')
@click.option('--imgname',default='False',help='image name if capture=no')
@click.option('--capture',default='yes',help='capture image from camera or not')
@click.option('--serial',default='no',help='run serailly after to compare or not')
def findfaces(imgname,capture,profile,serial):
	#print sys.platform
	if type(imgname)=='str' and capture=='yes':
		print "there is a problem with contradicting image signals"
	c=Client(profile=profile)
	numnodes=len(c.ids)
	dview=c[:]
	dview.block=False
	with dview.sync_imports():
		import cv2, sys, time, math
	print sys.platform
	if sys.platform=='darwin':
		file=open("/Users/isaac/Code/parastuff/timedistinfo","r")
		if capture=='no':
			img=cv2.imread("/Users/isaac/Code/group4.jpg")
		else:
			cam=cv2.VideoCapture(-1)
			retval,img=cam.read()
		facedetector=cv2.CascadeClassifier("/usr/local/Cellar/opencv/2.4.9/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml")
	elif sys.platform=='linux2':
		file=open("/home/pi/timedistinfo","r")
		if capture=='no':
			img=cv2.imread("/home/pi/"+imgname)
		else:
			cam=cv2.VideoCapture(-1)
			retval,img=cam.read()
		facedetector=cv2.CascadeClassifier("/home/pi/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt2.xml")
	else: 
		print "something went wrong detecting the system"
	#exptimes=cPickle.load(file)
	cam.release()
	scale=1.1
	dview['scale']=scale
	dview['img']=img
	dview.execute("img=img.copy()")
	
	for i in c.ids:
		c[i].execute('if sys.platform=="darwin": haarface=cv2.CascadeClassifier("/usr/local/Cellar/opencv/2.4.9/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml")')
		c[i].execute('if sys.platform=="linux2": haarface=cv2.CascadeClassifier("/home/pi/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt2.xml")')

	sp=min(img.shape[:1])
	numsizes=int(log(sp/20)/log(scale))
	trans=[None]*numsizes
	for i in range(numsizes):
		trans[i]=int(20*(scale**i))

	times=gen.loadtimes()
	thismin=min(times)
	for i in range(numsizes-1):
		times[i]=times[i]-thismin

	timepernode=sum(times)/numnodes
	print timepernode
	thresholds=[None]*(numnodes+1)
	thresholds[0]=0

	print "predicting even distribution..."
	for i in range(1,numnodes+1):
		j=thresholds[i-1]+1
		while sum(times[thresholds[i-1]:j])<timepernode and j<numsizes:
			j=j+1
			#print j
			#time.sleep(3)
		if sum(times[thresholds[i-1]:j])-timepernode>timepernode-sum(times[thresholds[i-1]:j-1]):
			j=j-1 #makes more even, but last few take longest...otherwise even but last is really short
		print sum(times[thresholds[i-1]:j])
		thresholds[i]=j
	thresholds[numnodes]=numsizes-1
	print thresholds
	
	for i in range(numnodes):
		c[c.ids[i]]['thismin']=tuple([trans[thresholds[i]]-1]*2)
		c[c.ids[i]]['thismax']=tuple([trans[thresholds[i+1]]+1]*2)
	
	starttime=time.time()
	dview.execute("exectime=time.time();myfaces=haarface.detectMultiScale(img,scale,4,1,thismin,thismax);exectime=time.time()-exectime;endtime=time.time()",block=False)
	faces=set()
	thistimes=[None]*numnodes
	thistimesremote=[None]*numnodes
	for i in range(numnodes):
		thistimes[i]=time.time()
		thisfaces=c[c.ids[i]]["myfaces"]
		thistimesremote[i]=c[c.ids[i]]["exectime"]
		print len(thisfaces)
		if len(thisfaces)>0:
			for face in thisfaces:
				faces.add(tuple(face))
		thistimes[i]=time.time()-thistimes[i]
	print thistimes
	print thistimesremote

	duptime=time.time()
	facelist=list(faces)
	donttest=[]
	finallist=[]
	testlen=len(facelist)
	origlist=facelist
	testlennew=0
	print len(origlist)
	while not testlennew==testlen:
		testlen=len(facelist)
		for first in range(len(facelist)):
			if first not in donttest:
				for second in range(first+1,len(facelist)):
					sub=facelist[first]
					j=facelist[second]
					var=abs(j[3]-sub[3])/2
					if ((j[0]+j[3]/2-var<sub[0]+sub[3]/2) and (j[0]+j[3]/2+var>sub[0]+sub[3]/2)) and ((j[1]+j[2]/2-var<sub[1]+sub[2]/2) and (j[1]+j[2]/2+var>sub[1]+sub[2]/2)) and min([float(j[3])/sub[3],float(sub[3])/j[3]])>1.0/2.0:
						donttest.append(first)
						donttest.append(second)
						#facelist.append(tuple([(j[0]+sub[0])/2,(j[1]+sub[1])/2,(j[2]+sub[2])/2,(j[3]+sub[3])/2]))
						inter=tuple([(j[0]+sub[0])/2,(j[1]+sub[1])/2,(j[2]+sub[2])/2,(j[3]+sub[3])/2])
						finallist.append(inter)
						break
				if first not in donttest:
					finallist.append(facelist[first])
		testlennew=len(finallist)
		facelist=finallist
		finallist=[]
		donttest=[]
	finallist=facelist
	duptime=time.time()-duptime
	print len(finallist)
	starttime=time.time()-starttime
	print "min/avg/max/regtime/tottime: "+str(min(thistimesremote))+"/"+str(sum(thistimesremote)/numnodes)+"/"+str(max(thistimesremote))+"/"+str(starttime)+"/"+str(sum(thistimesremote))

	if serial=='yes':
		serialtime=time.time()
		facedetector.detectMultiScale(img,scale,4,1)
		serialtime=time.time()-serialtime
		print serialtime

	for (x,y,h,w) in finallist:
		cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),1)
	cv2.imshow("img",img)
	if sys.platform=='linux2':
		cv2.waitKey()
	time.sleep(30)

if __name__=='__main__':
	findfaces()