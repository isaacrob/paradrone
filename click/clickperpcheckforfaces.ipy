import click, cv2, sys,time
from IPython.parallel import Client
from math import log
import gentimedist as gen

@click.command()
@click.option('--profile',default='picluster',help='which profile to use')
def checkforfaces():
	c=Client(profile=profile)
	dview=c[:]
	dview.block=False
	numnodes=len(c.ids)
	cam=cv2.VideoCapture(-1)
	with dview.sync_imports():
		import cv2, sys, time, math
	print sys.platform
	if sys.platform=='darwin':
		facedetector=cv2.CascadeClassifier("/usr/local/Cellar/opencv/2.4.9/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml")
	elif sys.platform=='linux2':
		facedetector=cv2.CascadeClassifier("/home/pi/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt2.xml")
	else: 
		print "something went wrong detecting the system"
	times=gen.loadtimes()
	scale=1.1
	dview["scale"]=scale
	for i in c.ids:
		c[i].execute('if sys.platform=="darwin": haarface=cv2.CascadeClassifier("/usr/local/Cellar/opencv/2.4.9/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml")')
		c[i].execute('if sys.platform=="linux2": haarface=cv2.CascadeClassifier("/home/pi/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt2.xml")')
	
	numsizes=len(times)
	trans=[None]*numsizes
	for i in range(numsizes):
		trans[i]=int(20*(scale**i))
	
	mintime=min(times)
	times=[time-mintime for time in times]
	
	timepernode=sum(times)/numnodes
	thresholds=[None]*(numnodes+1)
	thresholds[0]=0

	#print "predicting even distribution..."
	for i in range(1,numnodes+1):
		j=thresholds[i-1]+1
		while sum(times[thresholds[i-1]:j])<timepernode and j<numsizes:
			j=j+1
			#print j
			#time.sleep(3)
		if sum(times[thresholds[i-1]:j])-timepernode>timepernode-sum(times[thresholds[i-1]:j-1]):
			j=j-1 #makes more even, but last few take longest...otherwise even but last is really short
		thresholds[i]=j
	thresholds[numnodes]=numsizes-1
	
	retval,sampleimg=cam.read()
	if retval==False:
		sys.exit("something wrong with cam.read(), exiting")
	
	
	