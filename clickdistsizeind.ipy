import click,cv2,sys,time,random
from IPython.parallel import Client
from math import ceil

@click.command()
@click.option("--profile",default="default",help="profile to connect to")
@click.option("--numsizes",default=20,help="number of sizes of faces to check") #should adjust for numnodes
@click.option("--pow",default=1.5,help="power with which to distribute the sizes")
@click.argument("imgname")
def findfaces(profile,numsizes,imgname,pow):
	c=Client(profile=profile)
	dview=c[:]
	dview.block=False
	with dview.sync_imports():
		import cv2, sys, time
	numnodes=len(c.ids)
	pernode=1
	while numnodes*(pernode+1)<numsizes:
		pernode=pernode+1
	numsizes=numnodes*pernode
	print "numsizes changed to: "+str(numsizes)
	for i in c.ids:
		c[i].execute('if sys.platform=="darwin": facedetector=cv2.CascadeClassifier("/usr/local/Cellar/opencv/2.4.9/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml")')
		c[i].execute('if sys.platform=="linux2": facedetector=cv2.CascadeClassifier("/home/pi/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt2.xml")')
	plat=sys.platform
	if plat=='darwin':
		facedetector=cv2.CascadeClassifier("/usr/local/Cellar/opencv/2.4.9/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml")
	elif plat=='linux2':
		facedetector=cv2.CascadeClassifier("/home/pi/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt2.xml")
	else:
		sys.exit("did not recognize sys.platform")
	exectime=time.time()
	img=cv2.imread("/Users/isaac/Code/"+imgname)
	sp=int(min(img.shape[:1])/1.5)
	dview["img"]=img
	dview.execute("img=img.copy()")
	sizelist=[None]*numsizes
	scale=(sp/20)**(1.0/numsizes)
	dview["scale"]=scale
	print scale
	for i in range(numsizes):
		sizelist[i]=int(20*(scale**i))
	sizelistdiv=[[None]]*numnodes
	translist=[0,3,5,6,9,14,29]
	for i in range(numnodes):
		#thisstart=i*pernode
		#thisstart=int(ceil((i**pow)*numsizes/float(numnodes**pow)))
		thisstart=translist[i]
		print thisstart
		#thisend=(i+1)*pernode
		#thisend=int(ceil(((i+1)**pow)*numsizes/float(numnodes**pow)))
		thisend=translist[i+1]
		print thisend
		sizelistdiv[i]=sizelist[thisstart:thisend]
	print sizelistdiv
	for i in range(numnodes):
		thismin=tuple([sizelistdiv[i][0]-2]*2)
		print thismin
		c[c.ids[i]]["mymin"]=thismin
		thismax=tuple([sizelistdiv[i][len(sizelistdiv[i])-1]+2]*2)
		print thismax
		c[c.ids[i]]["mymax"]=thismax
	dview.execute("exectime=time.time();interface=facedetector.detectMultiScale(img,scale,5,1,mymin,mymax);exectime=time.time()-exectime")
	facelist=set()
	timelist=[0]*numnodes
	timelist2=[0]*numnodes
	sizelist2=set()
	nodefacelist=[]
	for i in c.ids:
		timelist[c.ids.index(i)]=time.time()
		timelist2[c.ids.index(i)]=c[i]["exectime"]
		interface=c[i]["interface"]
		if len(interface)>0:
			nodefacelist.append(interface)
			print str(i)+" found "+str(len(interface))+" faces"
			for face in interface:
				facelist.add(tuple(face.tolist()))
				sizelist2.add(face[3])
		timelist[i]=time.time()-timelist[i]
	sizelist2=list(sizelist2)
	sizelist2.sort()
	duptime=time.time()
	facelist=list(facelist)
	donttest=[]
	finallist=[]
	testlen=len(facelist)
	origlist=facelist
	testlennew=0
	print len(origlist)
	while not testlennew==testlen:
		testlen=len(facelist)
		for first in range(len(facelist)):
			if first not in donttest:
				for second in range(first+1,len(facelist)):
					sub=facelist[first]
					j=facelist[second]
					var=abs(j[3]-sub[3])/2
					if ((j[0]+j[3]/2-var<sub[0]+sub[3]/2) and (j[0]+j[3]/2+var>sub[0]+sub[3]/2)) and ((j[1]+j[2]/2-var<sub[1]+sub[2]/2) and (j[1]+j[2]/2+var>sub[1]+sub[2]/2)) and min([float(j[3])/sub[3],float(sub[3])/j[3]])>1.0/2.0:
						donttest.append(first)
						donttest.append(second)
						#facelist.append(tuple([(j[0]+sub[0])/2,(j[1]+sub[1])/2,(j[2]+sub[2])/2,(j[3]+sub[3])/2]))
						inter=tuple([(j[0]+sub[0])/2,(j[1]+sub[1])/2,(j[2]+sub[2])/2,(j[3]+sub[3])/2])
						finallist.append(inter)
						break
				if first not in donttest:
					finallist.append(facelist[first])
		testlennew=len(finallist)
		facelist=finallist
		finallist=[]
		donttest=[]
	finallist=facelist
	duptime=time.time()-duptime
	print str(sizelist)+" v "+str(set(sizelist2)-set(sizelist))
	print duptime
	print len(finallist)
	print "total time spent parallel: "+str(time.time()-exectime)
	print "time spent executing on different nodes: "+str(timelist2)
	#print sum(timelist)
	print "total parallel execution time: "+str(sum(timelist2))
	serialtime=time.time()
	c[c.ids[0]].execute("totalfaces=facedetector.detectMultiScale(img,scale,5,1)")
	faces=c[c.ids[0]]["totalfaces"]
	serialtime=time.time()-serialtime
	print serialtime
	print "("+str(serialtime/numnodes)+" v "+str(sum(timelist))+" v "+str(sum(timelist2)/numnodes)+")"
	print len(faces)
	for (x,y,h,w) in finallist:
		cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),3)
	for i in range(len(nodefacelist)):
		color=(random.randint(0,255),random.randint(0,255),random.randint(0,255))
		if i==0:
			thickness=2
		else:
			thickness=1
		for (x,y,h,w) in nodefacelist[i]:
			cv2.rectangle(img,(x,y),(x+w,y+h),color,thickness)
	cv2.imshow("img",img)
	time.sleep(10000)

if __name__=='__main__':
	findfaces()